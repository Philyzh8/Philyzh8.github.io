<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://philyzh8.github.io</id>
    <title>scMGCA</title>
    <updated>2022-12-20T08:08:01.782Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://philyzh8.github.io"/>
    <link rel="self" href="https://philyzh8.github.io/atom.xml"/>
    <logo>https://philyzh8.github.io/images/avatar.png</logo>
    <icon>https://philyzh8.github.io/favicon.ico</icon>
    <rights>All rights reserved 2022, scMGCA</rights>
    <entry>
        <title type="html"><![CDATA[Tutorial]]></title>
        <id>https://philyzh8.github.io/post/tutorial/</id>
        <link href="https://philyzh8.github.io/post/tutorial/">
        </link>
        <updated>2022-11-04T06:24:18.000Z</updated>
        <content type="html"><![CDATA[<p><code>scMGCA</code> is a deep graph embedding learning method for single-cell clustering, which can be used to:</p>
<ul>
<li>Single-cell data clustering. The example can be seen in the <a href="https://github.com/Philyzh8/scMGCA/blob/master/tutorial/demo.py">demo.py</a>.</li>
<li>Correct the batch effect of data from different scRNA-seq protocols. The example can be seen in the <a href="https://github.com/Philyzh8/scMGCA/blob/master/tutorial/demo_batch.py">demo_batch.py</a>.</li>
<li>Analysis of the mouse brain data with 1.3 million cells. The example can be seen in the <a href="https://github.com/Philyzh8/scMGCA/blob/master/tutorial/demo_scale.py">demo_scale.py</a>.</li>
<li>Provide a automatic supershell search algorithm. The example can be seen in the <a href="https://github.com/Philyzh8/scMGCA/blob/master/tutorial/demo_para.py">demo_para.py</a>.</li>
</ul>
<p>We give users some suggestions for running in the <a href="https://github.com/Philyzh8/scMGCA/blob/master/tutorial/tutorial.md">tutorial.md</a>.</p>
<p>In this tutorial, we will perform the entire <code>scMGCA</code> cluster analysis using the Qx Bladder dataset dataset (can be downloaded <a href="https://drive.google.com/drive/folders/1BIZxZNbouPtGf_cyu7vM44G5EcbxECeu">here</a>), and the entire <code>scMGCA</code> batch effect correction using the human pancreatic dataset (can be downloaded <a href="https://github.com/Philyzh8/scMGCA/tree/master/dataset/pancreas">here</a>).</p>
<h2 id="cluster-analysis">Cluster analysis</h2>
<h3 id="import-python-package">Import python package</h3>
<p>Import the <code>scMGCA</code>  module for cluster analysis and other python packages.</p>
<pre><code>import os
import argparse
import pandas as pd
import tensorflow as tf
from spektral.layers import GraphConv
from sklearn import metrics
from numpy.random import seed
seed(1)
tf.random.set_seed(1)
# Remove warnings
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)
# scMGCA module
from scMGCA.preprocess import *
from scMGCA.utils import *
from scMGCA.scmgca import SCMGCA, SCMGCAL
from scMGCA.losses import *
from scMGCA.graph_function import *
</code></pre>
<h3 id="parameter-settings">Parameter settings</h3>
<p>Set some parameters, including selecting the number of highly variable genes, pre-training epochs and training epochs.</p>
<pre><code>parser = argparse.ArgumentParser(description=&quot;train&quot;, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(&quot;--dataname&quot;, default = &quot;Quake_10x_Bladder&quot;, type = str)
parser.add_argument(&quot;--highly_genes&quot;, default = 500, type=int)
parser.add_argument(&quot;--pretrain_epochs&quot;, default = 1000, type=int)
parser.add_argument(&quot;--maxiter&quot;, default = 300, type=int)
args = parser.parse_args()
</code></pre>
<h3 id="read-data">Read data</h3>
<p>Read raw gene expression data and true labels from <code>.h5</code> files.</p>
<pre><code>data = './dataset/'+args.dataname+'/data.h5'
x, y = prepro(data)
cluster_number = len(np.unique(y))
print(&quot;Cell number:&quot;, x.shape[0])
print(&quot;Gene number&quot;,x.shape[1])        
print(&quot;Cluster number:&quot;, cluster_number)
</code></pre>
<h3 id="data-preprocessing">Data preprocessing</h3>
<p><code>scMGCA</code> uses <code>AnnData</code> object data to preserve data, and uses <code>SCANPY</code> to preprocess the data, including cells and genes filtering, normalization, logarithm transformation, Selection of highly variable genes and scaling.</p>
<pre><code>x = np.ceil(x).astype(np.int)
adata = sc.AnnData(x)
adata.obs['Group'] = y
adata = normalize(adata, copy=True, highly_genes=args.highly_genes, size_factors=True, normalize_input=True, logtrans_input=True)
</code></pre>
<h3 id="construct-cell-graph">Construct cell graph</h3>
<p>Construct a cell-PPMI graph and use it as an input graph in GCN.</p>
<pre><code>count = adata.X
adj = get_adj(count)
adj_n = GraphConv.preprocess(adj)
</code></pre>
<h3 id="pre-training">Pre-training</h3>
<p>Build the <code>scMGCA</code> model and perform pre-training to obtain the low-dimensional representation.</p>
<pre><code>model = SCMGCA(count, adj=adj, adj_n=adj_n)
model.pre_train(epochs=args.pretrain_epochs)
latent_pre = model.embedding(count, adj_n)
</code></pre>
<h3 id="training">Training</h3>
<p>The cluster centers are initialized on the pretrained low-dimensional representation and then input into the <code>scMGCA</code> cluster analysis model for training.</p>
<pre><code>centers = init_center(args, latent_pre, adj_n, cluster_number)
Cluster_predicted=model.train(epochs=args.maxiter, centers=centers)
</code></pre>
<h3 id="evaluation">Evaluation</h3>
<p>Evaluate the clustering results</p>
<pre><code>y = list(map(int, y))
Cluster_predicted.y_pred = np.array(Cluster_predicted.y_pred)
nmi = metrics.normalized_mutual_info_score(y, Cluster_predicted.y_pred)
ari = metrics.adjusted_rand_score(y, Cluster_predicted.y_pred)
print('NMI= %.4f, ARI= %.4f' % (nmi, ari))
</code></pre>
<pre><code>NMI= 0.9802, ARI= 0.9900
</code></pre>
<h2 id="batch-effect-correction">Batch effect correction</h2>
<h3 id="import-python-package-2">Import python package</h3>
<p>Import the <code>scMGCA</code>  module for batch effect correction and other python packages.</p>
<pre><code>import os
import argparse
import pandas as pd
import tensorflow as tf
from spektral.layers import GraphConv
from sklearn import metrics
from numpy.random import seed
seed(1)
tf.random.set_seed(1)
# Remove warnings
import warnings
warnings.simplefilter(action='ignore', category=FutureWarning)
tf.compat.v1.logging.set_verbosity(tf.compat.v1.logging.ERROR)
# scMGCA module
from scMGCA.preprocess import *
from scMGCA.utils import *
from scMGCA.scmgca import SCMGCA, SCMGCAL
from scMGCA.losses import *
from scMGCA.graph_function import *
</code></pre>
<h3 id="parameter-settings-2">Parameter settings</h3>
<p>Set some parameters, including selecting the number of highly variable genes, pre-training epochs and training epochs.</p>
<pre><code>parser = argparse.ArgumentParser(description=&quot;train&quot;, formatter_class=argparse.ArgumentDefaultsHelpFormatter)
parser.add_argument(&quot;--dataname&quot;, default = &quot;pancreas&quot;, type = str)
parser.add_argument(&quot;--highly_genes&quot;, default = 2000, type=int)
parser.add_argument(&quot;--pretrain_epochs&quot;, default = 1000, type=int)
parser.add_argument(&quot;--maxiter&quot;, default = 300, type=int)
args = parser.parse_args()
</code></pre>
<h3 id="read-data-2">Read data</h3>
<p>Read raw gene expression data and true labels from <code>.h5</code> files.</p>
<pre><code>adata = read_pancreas(&quot;./dataset/pancreas&quot;, cache=True)
y = np.array(adata.obs['celltype'].values, dtype=str)
cluster_number = len(np.unique(y))
print(&quot;Cell number:&quot;, adata.X.shape[0])
print(&quot;Gene number&quot;,adata.X.shape[1])   
print(&quot;Cluster number:&quot;, cluster_number)
</code></pre>
<h3 id="data-preprocessing-2">Data preprocessing</h3>
<p><code>scMGCA</code> uses <code>AnnData</code> object data to preserve data, and uses <code>SCANPY</code> to preprocess the data, including cells and genes filtering, normalization, logarithm transformation, Selection of highly variable genes and scaling.</p>
<pre><code>count = normalize_batch(adata, batch_key = 'tech', n_high_var = args.highly_genes)  
print(count.shape)
</code></pre>
<h3 id="construct-cell-graph-2">Construct cell graph</h3>
<p>Construct a cell-PPMI graph and use it as an input graph in GCN.</p>
<pre><code>adj = get_adj(count)
adj_n = GraphConv.preprocess(adj)
</code></pre>
<h3 id="pre-training-2">Pre-training</h3>
<p>Build the <code>scMGCA</code> model and perform pre-training to obtain the low-dimensional representation.</p>
<pre><code>model = SCMGCA(count, adj=adj, adj_n=adj_n, latent_dim=20, dec_dim=[128])
model.pre_train(epochs=args.pretrain_epochs, W_a=0.6, lr=5e-4)
latent_pre = model.embedding(count, adj_n)
</code></pre>
<h3 id="training-2">Training</h3>
<p>The cluster centers are initialized on the pretrained low-dimensional representation and then input into the <code>scMGCA</code> cluster analysis model for training.</p>
<pre><code>adata_latent = sc.AnnData(latent_pre)
sc.pp.neighbors(adata_latent, n_neighbors = 15, use_rep=&quot;X&quot;)
resolution = find_resolution(adata_latent, 8, 0)
adata_latent = sc.tl.leiden(adata_latent, resolution = resolution, random_state = 0, copy = True)
Y_pred_init = np.asarray(adata_latent.obs['leiden'], dtype=int)
features = pd.DataFrame(adata_latent.X, index = np.arange(0, adata_latent.shape[0]))
Group = pd.Series(Y_pred_init, index = np.arange(0, adata_latent.shape[0]), name=&quot;Group&quot;)
Mergefeature = pd.concat([features, Group],axis=1)
centers = np.asarray(Mergefeature.groupby(&quot;Group&quot;).mean())
Cluster_predicted=model.train(epochs=args.maxiter, W_a=0.6, centers=centers)
</code></pre>
<h3 id="evaluation-2">Evaluation</h3>
<p>Evaluate the clustering results</p>
<pre><code>y = list(map(str, y))
Cluster_predicted.y_pred = np.array(Cluster_predicted.y_pred)
nmi = metrics.normalized_mutual_info_score(y, Cluster_predicted.y_pred)
ari = metrics.adjusted_rand_score(y, Cluster_predicted.y_pred)
print('NMI= %.4f, ARI= %.4f' % (nmi, ari))
</code></pre>
<pre><code>NMI= 0.9275, ARI= 0.9585
</code></pre>
<h3 id="visualization">Visualization</h3>
<p>Visualize latent representations via UMAP and label them with ground-truth batch labels.</p>
<pre><code>import matplotlib.pyplot as plt
import umap
latent = Cluster_predicted.latent
reducer = umap.UMAP(n_neighbors=20,metric='cosine',min_dist=0.01,random_state=42)
embedding = reducer.fit_transform(latent)
for i, x in enumerate(adata.obs['tech']):
    if x == 'celseq':
        s1 = plt.scatter(embedding[i][0], embedding[i][1], s=5, color='#019013')
    elif x == 'celseq2':
        s2 = plt.scatter(embedding[i][0], embedding[i][1], s=5, color='#FD8400')
    elif x == 'fluidigmc1':
        s3 = plt.scatter(embedding[i][0], embedding[i][1], s=5, color='#BD9001')
    elif x == 'smartseq2':
        s4 = plt.scatter(embedding[i][0], embedding[i][1], s=5, color='#00BAAC')

plt.xticks([])
plt.yticks([])
plt.xlabel('UMAP1', fontsize=25)
plt.ylabel('UAMP2', fontsize=25)

ax = plt.gca()
ax.spines['right'].set_color('black')
ax.spines['top'].set_color('black')
ax.spines['left'].set_color('black')
ax.spines['bottom'].set_color('black')
ax.spines['bottom'].set_linewidth(2)
ax.spines['left'].set_linewidth(2)
ax.spines['right'].set_linewidth(2)
ax.spines['top'].set_linewidth(2)  
plt.show()
</code></pre>
<figure data-type="image" tabindex="1"><img src="https://philyzh8.github.io/post-images/1668403944135.jpg" alt="" loading="lazy"></figure>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Installation]]></title>
        <id>https://philyzh8.github.io/post/installation/</id>
        <link href="https://philyzh8.github.io/post/installation/">
        </link>
        <updated>2022-11-04T06:10:52.000Z</updated>
        <content type="html"><![CDATA[<h2 id="system-requirements">System Requirements</h2>
<h3 id="hardware-requirements">Hardware requirements</h3>
<p><code>scMGCA</code> package requires only a standard computer with enough RAM to support the in-memory operations.</p>
<h3 id="software-requirements">Software requirements</h3>
<h4 id="os-requirements">OS Requirements</h4>
<p>This package is supported for <em>Linux</em>. The package has been tested on the following systems:</p>
<ul>
<li>Linux: Ubuntu 18.04</li>
</ul>
<h4 id="python-dependencies">Python Dependencies</h4>
<p><code>scMGCA</code> mainly depends on the Python scientific stack.</p>
<pre><code>numpy
scipy
tensorflow
scikit-learn
pandas
scanpy
anndata
</code></pre>
<p>For specific setting, please see <a href="https://github.com/Philyzh8/scMGCA/blob/master/requirements.txt">requirement</a>.</p>
<h2 id="installation-guide">Installation Guide:</h2>
<h3 id="install-from-pypi">Install from PyPi</h3>
<pre><code>$ conda create -n scMGCA_env python=3.6.8
$ conda activate scMGCA_env
$ pip install -r requirements.txt
$ pip install scMGCA
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Home]]></title>
        <id>https://philyzh8.github.io/post/topological-identification-and-interpretation-for-high-throughput-single-cell-gene-regulation-elucidation-across-multiple-platforms-using-scmgca/</id>
        <link href="https://philyzh8.github.io/post/topological-identification-and-interpretation-for-high-throughput-single-cell-gene-regulation-elucidation-across-multiple-platforms-using-scmgca/">
        </link>
        <updated>2022-11-04T05:54:55.000Z</updated>
        <content type="html"><![CDATA[<h2 id="scmgca">scMGCA</h2>
<p><a href="https://pypi.org/project/scMGCA/"><img src="https://img.shields.io/pypi/v/scMGCA.svg" alt="PyPI badge" loading="lazy"></a> <a href="https://opensource.org/licenses/MIT"><img src="https://img.shields.io/badge/License-MIT-green.svg" alt="License" loading="lazy"></a></p>
<p><code>scMGCA</code> is a Python package containing tools for clustering single-cell data based on a graph-embedding autoencoder that simultaneously learns cell–cell topology representation and cluster assignments.</p>
<h2 id="overview">Overview</h2>
<p>Single-cell RNA sequencing (scRNA-seq) provides high-throughput gene expression information to explore cellular heterogeneity at the individual cell level. A major challenge in characterizing high-throughput gene expression data arises from the curse of dimensionality, and the prevalence of dropout events. To address these concerns, we developed a single-cell clustering method (scMGCA) based on a graph-embedding autoencoder that simultaneously learns cell–cell topology representation and cluster assignments. In scMGCA, we propose a graph convolutional autoencoder to preserve the topological information of cells from the embedded space in multinomial distribution, and employs the positive pointwise mutual information (PPMI) matrix for cell graph augmentation. Experiments show that scMGCA is accurate and effective for cell segregation and superior to other state-of-the-art models across multiple platforms, and is also able to correct for the batch effect from multiple scRNA-seq protocols. In addition, we perform genomic interpretation on the key compressed transcriptomic space of the graph-embedding autoencoder to demonstrate the underlying gene regulation mechanism. In a pancreatic ductal adenocarcinoma (PDAC) dataset, with 57,530 individual pancreatic cells from primary PDAC tumors and control pancreases, scMGCA successfully provided annotations on the specific cell types and revealed differential gene expression levels across multiple tumor-associated and cell signalling pathways in PDAC progression through single-cell trajectory and gene set enrichment analysis.</p>
<figure data-type="image" tabindex="1"><img src="https://user-images.githubusercontent.com/65069252/192435582-5f012751-76ea-42a0-9ad2-a6e56f544528.jpg" alt="1664254559(1)" loading="lazy"></figure>
<h2 id="license">License</h2>
<p>This project is covered under the <strong>MIT License</strong>.</p>
<h2 id="source-code">Source code</h2>
<p>The source code of <code>scMGCA</code> is at GitHub: <a href="https://github.com/Philyzh8/scMGCA">https://github.com/Philyzh8/</a>.</p>
]]></content>
    </entry>
</feed>